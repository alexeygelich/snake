{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","xy","setXY","xTarget","setXTarget","yTarget","setYTarget","error","setError","count","setCount","time","setTime","direction","setDirection","moved","setMoved","cell","raw","intervalID","useRef","useEffect","firstEl","length","prev","newCoords","newCell","unshift","newTarget","isTarget","newXTarg","Math","round","random","newYTarg","forEach","coord","slice","console","log","moveFn","moveDown","newCoord","newPoint","JSON","parse","stringify","push","array","isError","testFn","arowDownFn","clearInterval","current","setInterval","arowUpFn","arowRightFn","arowLeftFn","arrowClick","key","window","removeEventListener","addEventListener","i","className","map","rawItem","idxRaw","idxCell","uuidv4","isActive","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a6c78d47.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport \"./App.css\";\n\nfunction App() {\n  const [xy, setXY] = useState([\n    [3, 3],\n    [3, 4],\n    [4, 4],\n  ]);\n  const [xTarget, setXTarget] = useState(1);\n  const [yTarget, setYTarget] = useState(1);\n  const [error, setError] = useState(false);\n  const [count, setCount] = useState(0);\n  const [time, setTime] = useState(500);\n  const [direction, setDirection] = useState(null);\n  const [moved, setMoved] = useState(null);\n  const cell = [];\n  const raw = [];\n  let intervalID = useRef(null);\n\n  useEffect(() => {\n    const newTarget = () => {\n      let isTarget = false;\n      let newXTarg = Math.round(Math.random() * 14);\n      let newYTarg = Math.round(Math.random() * 14);\n      xy.forEach((coord) => {\n        if (coord[0] === newXTarg && coord[1] === newYTarg) {\n          isTarget = true;\n          newTarget();\n          return;\n        }\n      });\n      if (isTarget) return;\n      setXTarget(newXTarg);\n      setYTarget(newYTarg);\n    };\n\n    const firstEl = xy[xy.length - 1];\n\n    if (firstEl[0] === xTarget && firstEl[1] === yTarget) {\n      setCount((prev) => prev + 1);\n      setXY((prev) => {\n        let newCoords = [...prev];\n        let newCell = [...newCoords[0]];\n        newCoords.unshift(newCell);\n        return [...newCoords];\n      });\n\n      newTarget();\n\n      setTime((prev) => Math.round(prev * 0.93));\n      return;\n    }\n\n    xy.slice(0, xy.length - 2).forEach((coord) => {\n      if (firstEl[0] === coord[0] && firstEl[1] === coord[1]) {\n        setError(true);\n        return console.log(\"ERRORR!!!!\");\n      }\n    });\n  }, [xTarget, xy, yTarget]);\n\n  useEffect(() => {\n    const testFn = (array) => {\n      let isError = false;\n      const firstEl = array[array.length - 1];\n      array.slice(0, array.length - 2).forEach((coord) => {\n        if (firstEl[0] === coord[0] && firstEl[1] === coord[1]) {\n          setError(true);\n          return (isError = true);\n        }\n      });\n      return isError;\n    };\n\n    const moveFn = (moveDown) => {\n      setXY((prev) => {\n        let newCoord = prev.slice(1);\n        let newPoint = JSON.parse(JSON.stringify(newCoord[newCoord.length - 1]));\n        // eslint-disable-next-line default-case\n        switch (moveDown) {\n          case \"Right\":\n            newPoint[0] += 1;\n            setMoved(\"ArrowRight\");\n            break;\n\n          case \"Left\":\n            newPoint[0] -= 1;\n            setMoved(\"ArrowLeft\");\n            break;\n\n          case \"Down\":\n            newPoint[1] += 1;\n            setMoved(\"ArrowDown\");\n            break;\n\n          case \"Up\":\n            newPoint[1] -= 1;\n            setMoved(\"ArrowUp\");\n            break;\n        }\n        if (newPoint[0] > 14 || newPoint[1] > 14 || newPoint[0] < 0 || newPoint[1] < 0) {\n          setError(() => true);\n          return prev;\n        }\n        newCoord.push(newPoint);\n\n        return testFn(newCoord) ? prev : newCoord;\n      });\n    };\n\n    const arowDownFn = () => {\n      clearInterval(intervalID.current);\n\n      intervalID.current = setInterval(() => {\n        moveFn(\"Down\");\n      }, time);\n    };\n\n    const arowUpFn = () => {\n      clearInterval(intervalID.current);\n\n      intervalID.current = setInterval(() => {\n        moveFn(\"Up\");\n      }, time);\n    };\n\n    const arowRightFn = () => {\n      clearInterval(intervalID.current);\n\n      intervalID.current = setInterval(() => {\n        moveFn(\"Right\");\n      }, time);\n    };\n\n    const arowLeftFn = () => {\n      clearInterval(intervalID.current);\n\n      intervalID.current = setInterval(() => {\n        moveFn(\"Left\");\n      }, time);\n    };\n\n    if (moved && !error) {\n      moved === \"ArrowDown\" && arowDownFn();\n      moved === \"ArrowUp\" && arowUpFn();\n      moved === \"ArrowRight\" && arowRightFn();\n      moved === \"ArrowLeft\" && arowLeftFn();\n    }\n\n    const arrowClick = ({ key }) => {\n      if (error) {\n        return window.removeEventListener(\"keydown\", arrowClick);\n      }\n      if (key === \"ArrowDown\") {\n        if (direction === \"ArrowDown\" || moved === \"ArrowUp\") {\n          return;\n        }\n        clearInterval(intervalID.current);\n        setDirection(\"ArrowDown\");\n        moveFn(\"Down\");\n        arowDownFn();\n      }\n\n      if (key === \"ArrowUp\") {\n        if (direction === \"ArrowUp\" || moved === \"ArrowDown\") {\n          return;\n        }\n        clearInterval(intervalID.current);\n        setDirection(\"ArrowUp\");\n        moveFn(\"Up\");\n        arowUpFn();\n      }\n\n      if (key === \"ArrowRight\") {\n        if (direction === \"ArrowRight\" || moved === \"ArrowLeft\") {\n          return;\n        }\n        clearInterval(intervalID.current);\n        setDirection(\"ArrowRight\");\n        moveFn(\"Right\");\n        arowRightFn();\n      }\n\n      if (key === \"ArrowLeft\") {\n        if (direction === \"ArrowLeft\" || moved === \"ArrowRight\") {\n          return;\n        }\n        clearInterval(intervalID.current);\n        setDirection(\"ArrowLeft\");\n        moveFn(\"Left\");\n        arowLeftFn();\n      }\n    };\n\n    window.addEventListener(\"keydown\", arrowClick);\n    return () => {\n      clearInterval(intervalID.current);\n      window.removeEventListener(\"keydown\", arrowClick);\n    };\n  }, [direction, error, moved, time]);\n\n  for (let i = 0; i < 15; i++) {\n    cell.push(i);\n  }\n\n  for (let i = 0; i < 15; i++) {\n    raw.push(cell);\n  }\n\n  return (\n    <div className=\"wrapper\">\n      <ul>\n        {raw.map((rawItem, idxRaw) => (\n          <li key={uuidv4()}>\n            {rawItem.map((cell, idxCell) => {\n              if (idxRaw === yTarget && idxCell === xTarget) {\n                return <div key={uuidv4()} className=\"cell target\"></div>;\n              }\n              let isActive = false;\n              xy.forEach((coord) => {\n                if (coord[0] === idxCell && coord[1] === idxRaw) {\n                  isActive = true;\n                }\n              });\n              return <div key={uuidv4()} className={isActive ? \"cell isActive\" : \"cell\"}></div>;\n            })}\n          </li>\n        ))}\n      </ul>\n      <h1>Points: {count}</h1>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}