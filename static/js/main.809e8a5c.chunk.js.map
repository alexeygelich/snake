{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","xy","setXY","xTarget","setXTarget","yTarget","setYTarget","error","setError","count","setCount","time","setTime","direction","useRef","cell","raw","intervalID","useEffect","firstEl","length","prev","newCoords","newCell","unshift","newTarget","isTarget","newXTarg","Math","round","random","newYTarg","forEach","coord","slice","console","log","arrowClick","key","current","window","addEventListener","removeEventListener","moveFn","moveDown","newCoord","newPoint","JSON","parse","stringify","push","array","isError","testFn","setInterval","clearInterval","i","className","map","rawItem","idxRaw","idxCell","uuidv4","isActive","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.809e8a5c.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport \"./App.css\";\n\nfunction App() {\n  const [xy, setXY] = useState([\n    [3, 3],\n    [3, 4],\n    [4, 4],\n  ]);\n  const [xTarget, setXTarget] = useState(1);\n  const [yTarget, setYTarget] = useState(1);\n  const [error, setError] = useState(false);\n  const [count, setCount] = useState(0);\n  const [time, setTime] = useState(300);\n\n  let direction = useRef(null);\n  const cell = [];\n  const raw = [];\n  let intervalID = useRef(null);\n\n  useEffect(() => {\n    const newTarget = () => {\n      let isTarget = false;\n      let newXTarg = Math.round(Math.random() * 14);\n      let newYTarg = Math.round(Math.random() * 14);\n      xy.forEach((coord) => {\n        if (coord[0] === newXTarg && coord[1] === newYTarg) {\n          isTarget = true;\n          newTarget();\n          return;\n        }\n      });\n      if (isTarget) return;\n      setXTarget(newXTarg);\n      setYTarget(newYTarg);\n    };\n\n    const firstEl = xy[xy.length - 1];\n\n    if (firstEl[0] === xTarget && firstEl[1] === yTarget) {\n      setCount((prev) => prev + 1);\n      setXY((prev) => {\n        let newCoords = [...prev];\n        let newCell = [...newCoords[0]];\n        newCoords.unshift(newCell);\n        return [...newCoords];\n      });\n\n      newTarget();\n\n      setTime((prev) => Math.round(prev * 0.96));\n      return;\n    }\n\n    xy.slice(0, xy.length - 2).forEach((coord) => {\n      if (firstEl[0] === coord[0] && firstEl[1] === coord[1]) {\n        setError(true);\n        return console.log(\"ERRORR!!!!\");\n      }\n    });\n  }, [xTarget, xy, yTarget]);\n\n  useEffect(() => {\n    const arrowClick = ({ key }) => {\n\n      if (key === \"ArrowDown\") {\n        if (direction.current === \"ArrowDown\") {\n          return;\n        }\n\n        direction.current = \"ArrowDown\";\n      }\n\n      if (key === \"ArrowUp\") {\n        if (direction.current === \"ArrowUp\") {\n          return;\n        }\n\n        direction.current = \"ArrowUp\";\n      }\n\n      if (key === \"ArrowRight\") {\n        if (direction.current === \"ArrowRight\") {\n          return;\n        }\n\n        direction.current = \"ArrowRight\";\n      }\n\n      if (key === \"ArrowLeft\") {\n        if (direction.current === \"ArrowLeft\") {\n          return;\n        }\n\n        direction.current = \"ArrowLeft\";\n      }\n    };\n\n    window.addEventListener(\"keydown\", arrowClick);\n    return () => {\n      window.removeEventListener(\"keydown\", arrowClick);\n    };\n  }, [error]);\n\n  useEffect(() => {\n    if (error) {\n      clearInterval(intervalID.current);\n      return\n    }\n    const testFn = (array) => {\n      let isError = false;\n      const firstEl = array[array.length - 1];\n      array.slice(0, array.length - 2).forEach((coord) => {\n        if (firstEl[0] === coord[0] && firstEl[1] === coord[1]) {\n          setError(true);\n          return (isError = true);\n        }\n      });\n      return isError;\n    };\n\n    const moveFn = (moveDown) => {\n      setXY((prev) => {\n        let newCoord = prev.slice(1);\n        let newPoint = JSON.parse(JSON.stringify(newCoord[newCoord.length - 1]));\n        // eslint-disable-next-line default-case\n        switch (moveDown) {\n          case \"Right\":\n            newPoint[0] += 1;\n            break;\n\n          case \"Left\":\n            newPoint[0] -= 1;\n            break;\n\n          case \"Down\":\n            newPoint[1] += 1;\n            break;\n\n          case \"Up\":\n            newPoint[1] -= 1;\n            break;\n        }\n        if (newPoint[0] > 14 || newPoint[1] > 14 || newPoint[0] < 0 || newPoint[1] < 0) {\n          setError(() => true);\n          return prev;\n        }\n        newCoord.push(newPoint);\n\n        return testFn(newCoord) ? prev : newCoord;\n      });\n    };\n    intervalID.current = setInterval(() => {\n      direction.current === \"ArrowDown\" && moveFn(\"Down\");\n      direction.current === \"ArrowUp\" && moveFn(\"Up\");\n      direction.current === \"ArrowRight\" && moveFn(\"Right\");\n      direction.current === \"ArrowLeft\" && moveFn(\"Left\");\n    }, time);\n    return () => {\n      clearInterval(intervalID.current);\n    };\n  }, [error, time]);\n\n  for (let i = 0; i < 15; i++) {\n    cell.push(i);\n  }\n\n  for (let i = 0; i < 15; i++) {\n    raw.push(cell);\n  }\n\n  return (\n    <div className=\"wrapper\">\n      <ul>\n        {raw.map((rawItem, idxRaw) => (\n          <li key={uuidv4()}>\n            {rawItem.map((cell, idxCell) => {\n              if (idxRaw === yTarget && idxCell === xTarget) {\n                return <div key={uuidv4()} className=\"cell target\"></div>;\n              }\n              let isActive = false;\n              xy.forEach((coord) => {\n                if (coord[0] === idxCell && coord[1] === idxRaw) {\n                  isActive = true;\n                }\n              });\n              return <div key={uuidv4()} className={isActive ? \"cell isActive\" : \"cell\"}></div>;\n            })}\n          </li>\n        ))}\n      </ul>\n      <h1>Points: {count}</h1>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}