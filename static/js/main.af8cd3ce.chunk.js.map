{"version":3,"sources":["App.tsx","reportWebVitals.js","index.js"],"names":["App","initialSate","record","Number","localStorage","getItem","useState","xy","setXY","Math","round","random","xTarget","setXTarget","yTarget","setYTarget","error","setError","count","setCount","time","setTime","show","setShow","setRecord","direction","useRef","cell","raw","intervalID","NaN","isMoved","newRecord","setItem","toString","useEffect","firstEl","length","prev","newCoords","newCell","unshift","newTarget","isTarget","newXTarg","newYTarg","forEach","coord","slice","console","log","arrowClick","key","current","window","addEventListener","removeEventListener","moveFn","moveDown","newCoord","newPoint","JSON","parse","stringify","push","array","isError","testFn","setInterval","clearInterval","i","Button","variant","onClick","clear","className","map","rawItem","idxRaw","idxCell","uuidv4","isActive","Modal","dialogClassName","aria-labelledby","Header","Title","id","Body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.af8cd3ce.chunk.js","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { Modal, Button } from 'react-bootstrap';\n\nimport \"./App.css\";\n\ninterface IState {\n  record: number;\n}\n\nfunction App() {\n  const initialSate: IState = {\n    record: Number(localStorage.getItem('record')) || 0,\n  };\n  const [xy, setXY] = useState([\n    [3, 3],\n    [3, 4],\n    [4, 4],\n  ]);\n  const [xTarget, setXTarget] = useState(Math.round(Math.random() * 14));\n  const [yTarget, setYTarget] = useState(Math.round(Math.random() * 14));\n  const [error, setError] = useState(false);\n  const [count, setCount] = useState(0);\n  const [time, setTime] = useState(450);\n  const [show, setShow] = useState(false);\n  const [record, setRecord] = useState(initialSate.record)\n\n  let direction = useRef('');\n  const cell = [];\n  const raw = [];\n  let intervalID = useRef(NaN);\n  let isMoved = useRef(true);\n\n  const newRecord = () => {\n    if (count > record) {\n      setRecord(count);\n      localStorage.setItem('record', count.toString())\n    }\n  }\n\n  useEffect(() => {\n    const newTarget = () => {\n      let isTarget = false;\n      let newXTarg = Math.round(Math.random() * 14);\n      let newYTarg = Math.round(Math.random() * 14);\n      xy.forEach((coord) => {\n        if (coord[0] === newXTarg && coord[1] === newYTarg) {\n          isTarget = true;\n          newTarget();\n          return;\n        }\n      });\n      if (isTarget) return;\n      setXTarget(newXTarg);\n      setYTarget(newYTarg);\n    };\n\n    const firstEl = xy[xy.length - 1];\n\n    if (firstEl[0] === xTarget && firstEl[1] === yTarget) {\n      setCount((prev) => prev + Math.round(xy.length * 1000 / time));\n      setXY((prev) => {\n        let newCoords = [...prev];\n        let newCell = [...newCoords[0]];\n        newCoords.unshift(newCell);\n        return [...newCoords];\n      });\n\n      newTarget();\n\n      setTime((prev) => Math.round(prev * 0.96));\n      return;\n    }\n\n    xy.slice(0, xy.length - 2).forEach((coord) => {\n      if (firstEl[0] === coord[0] && firstEl[1] === coord[1]) {\n        setError(true);\n        newRecord();\n        setShow(true);\n        return console.log(\"ERRORR!!!!\");\n      }\n    });\n  }, [xTarget, xy, yTarget]);\n\n  interface IProp {\n    key: string;\n  }\n\n  useEffect(() => {\n    const arrowClick = ({ key }: IProp) => {\n      if (!isMoved.current) {\n        return\n      }\n      if (key === \"ArrowDown\") {\n        if (direction.current === \"ArrowUp\") {\n          return;\n        }\n\n        direction.current = \"ArrowDown\";\n      }\n\n      if (key === \"ArrowUp\") {\n        if (direction.current === \"ArrowDown\") {\n          return;\n        }\n\n        direction.current = \"ArrowUp\";\n      }\n\n      if (key === \"ArrowRight\") {\n        if (direction.current === \"ArrowLeft\") {\n          return;\n        }\n\n        direction.current = \"ArrowRight\";\n      }\n\n      if (key === \"ArrowLeft\") {\n        if (direction.current === \"ArrowRight\") {\n          return;\n        }\n\n        direction.current = \"ArrowLeft\";\n      }\n\n      isMoved.current = false;\n    };\n\n    window.addEventListener(\"keydown\", arrowClick);\n    return () => {\n      window.removeEventListener(\"keydown\", arrowClick);\n    };\n  }, [error]);\n\n\n\n  useEffect(() => {\n    if (error) {\n      clearInterval(intervalID.current);\n      return;\n    }\n    const testFn = (array: number[][]) => {\n      let isError = false;\n      const firstEl = array[array.length - 1];\n      array.slice(0, array.length - 2).forEach((coord) => {\n        if (firstEl[0] === coord[0] && firstEl[1] === coord[1]) {\n          setError(true);\n          newRecord();\n          setShow(true);\n          return (isError = true);\n        }\n      });\n      return isError;\n    };\n\n    const moveFn = (moveDown: string) => {\n      setXY((prev) => {\n        let newCoord = prev.slice(1);\n        let newPoint = JSON.parse(JSON.stringify(newCoord[newCoord.length - 1]));\n        // eslint-disable-next-line default-case\n        switch (moveDown) {\n          case \"ArrowRight\":\n            newPoint[0] += 1;\n            break;\n\n          case \"ArrowLeft\":\n            newPoint[0] -= 1;\n            break;\n\n          case \"ArrowDown\":\n            newPoint[1] += 1;\n            break;\n\n          case \"ArrowUp\":\n            newPoint[1] -= 1;\n            break;\n        }\n\n        if (newPoint[0] > 14 || newPoint[1] > 14 || newPoint[0] < 0 || newPoint[1] < 0) {\n          setError(() => true);\n          newRecord();\n          setShow(true);\n          return prev;\n        }\n\n        isMoved.current = true\n        newCoord.push(newPoint);\n\n        return testFn(newCoord) ? prev : newCoord;\n      });\n    };\n\n    intervalID.current = window.setInterval(() => {\n      switch (direction.current) {\n        case \"ArrowDown\":\n          moveFn(\"ArrowDown\")\n          break;\n        case \"ArrowUp\":\n          moveFn(\"ArrowUp\")\n          break;\n        case \"ArrowRight\":\n          moveFn(\"ArrowRight\")\n          break;\n        case \"ArrowLeft\":\n          moveFn(\"ArrowLeft\")\n          break;\n      }\n    }, time);\n    return () => {\n      clearInterval(intervalID.current);\n    };\n  }, [error, time]);\n\n  const handleStartClick = () => {\n    setError(false);\n\n    setCount(0);\n    setTime(450);\n    setShow(false);\n    setXY([\n      [3, 3],\n      [3, 4],\n      [4, 4],\n    ]);\n    direction.current = '';\n  }\n\n  const handleClearRecord = () => {\n    setRecord(0);\n    localStorage.clear();\n  }\n\n  for (let i = 0; i < 15; i++) {\n    cell.push(i);\n  }\n\n  for (let i = 0; i < 15; i++) {\n    raw.push(cell);\n  }\n\n  return (\n    <>\n      <h1>Record: {record}</h1>\n      <Button variant=\"success\" onClick={handleClearRecord}>Clear record</Button>\n      <div className=\"wrapper\">\n        <ul>\n          {raw.map((rawItem, idxRaw) => (\n            <li key={uuidv4()}>\n              {rawItem.map((cell, idxCell) => {\n                if (idxRaw === yTarget && idxCell === xTarget) {\n                  return <div key={uuidv4()} className=\"cell target\"></div>;\n                }\n                let isActive = false;\n                xy.forEach((coord) => {\n                  if (coord[0] === idxCell && coord[1] === idxRaw) {\n                    isActive = true;\n                  }\n                });\n                return <div key={uuidv4()} className={isActive ? \"cell isActive\" : \"cell\"}></div>;\n              })}\n            </li>\n          ))}\n        </ul>\n        <h1>Points: {count}</h1>\n      </div>\n      <Modal\n        show={show}\n        dialogClassName=\"modal-90w\"\n        aria-labelledby=\"example-custom-modal-styling-title\"\n      >\n        <Modal.Header>\n          <Modal.Title id=\"example-custom-modal-styling-title\">\n            Your results: {count} points\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Button variant=\"success\" onClick={handleStartClick}>Try again</Button>\n        </Modal.Body>\n      </Modal>\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <App />,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}